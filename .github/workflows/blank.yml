# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.



#############

 
jobs:
  lint:
    if: ${{ startsWith(github.event.pull_request.title, 'PR') && github.event.pull_request.merged == true }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installing dependent npm packages
        uses: ./.github/actions/installing_packages

      - name: Linting
        run: npm run lint
        shell: bash

  tests_coverage:
    needs: lint
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkout code
        uses: ./.github/actions/test_coverage

  

  Build:
    needs: tests_coverage
    name: Build blank
    runs-on: ubuntu-latest
 
    permissions:
      contents: read
      id-token: write
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # - name: Run Action for Retrieving PR Title
    #   uses: ./.github/actions/get-pr-title
    
    # - name: Run Action for Getting AP DEV Environmental Variables
    #   uses: ./.github/actions/get-inputs-dev/ap-dev

   
    


  

  
    - name: Run Action for Installing packages
      uses: ./.github/actions/installing_packages

    
  Deploy:
    name: Deploy 
    runs-on: ubuntu-latest
    needs: Build
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Action for Retrieving PR title
        uses: ./.github/actions/get-pr-title
      
      - name: Run Action for Getting AP DEV Environmental Variables
        uses: ./.github/actions/get-inputs-dev/ap-dev

      
      # helm dry run and check for pre dev prior to helm upgrade
      - name: Helm dry run predev
        id: helm_dry_run_predev    
        run: |   
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.PREDEV_NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{ env.REGION }}/values.${{ env.PREDEV_ENVIRONMENT }}.yaml --dry-run --debug \
                  --set image.tag=${{ env.TAG }}
              fi
          done             
          
        continue-on-error: false 

      - name: Check dry run result of predev
        if: ${{ steps.helm_dry_run_predev.outcome != 'success' }}
        run: echo "Dry run failed for predev. Please check the logs and fix the issues."
        continue-on-error: false 
      
      # helm dry run and check for dev prior to helm upgrade
      - name: Helm dry run dev
        id: helm_dry_run_dev    
        run: |    
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{ env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml --dry-run --debug \
                  --set base-subgraph-helm-chart.image.tag=$imageTag
              fi
          done           
          
        continue-on-error: false 

      - name: Check dry run result of dev
        if: ${{ steps.helm_dry_run_dev.outcome != 'success' }}
        run: echo "Dry run failed for dev. Please check the logs and fix the issues."
        continue-on-error: false       


      ## Deploy Manifest files to GKE Cluster using Helm ###
      - name: Deploy using Helm in ${{ env.NAMESPACE }} namespace
        if: ${{ steps.helm_dry_run_predev.outcome == 'success' && steps.helm_dry_run_dev.outcome == 'success' }}
        run: |
          echo "helm Dry run successful for predev, proceeding to next step."           
          echo "Running Helm deployment to ${{ env.PREDEV_ENVIRONMENT }}"
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
                  --wait --atomic \
                  --namespace=${{ env.PREDEV_NAMESPACE }} \
                  --set image.tag=${{ env.TAG }} \
                  --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.PREDEV_ENVIRONMENT }}.yaml
                echo "helm Dry run successful for dev, proceeding to next step."           
                echo "Running Helm deployment to ${{ env.ENVIRONMENT }}"
                helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
                  --wait --atomic \
                  --namespace=${{ env.NAMESPACE }} \
                  --set base-subgraph-helm-chart.image.tag=$imageTag \
                  --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml
                if [[ $imageTag == 'latest' ]]; then
                  kubectl rollout restart deployments/${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} -n ${{ env.NAMESPACE }}
                  kubectl rollout restart deployments/${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} -n ${{ env.PREDEV_NAMESPACE }}
                fi
              fi
          done
            
          
  